{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{2:function(t,e,s){\"use strict\";s.r(e);var i=s(0);customElements.define(\"todo-item\",class extends i.a{static get styles(){return i.b`\n            li {\n                display:flex;\n                align-items: center;\n                list-style-type: none;\n                margin: 5px 0;\n                padding: 6px 4px;\n                border-radius: 14px;\n            }\n            .completed {\n                text-decoration: line-through;\n                color: #bbb;\n                background: rgba(0, 0, 0, 0.05) ;\n            }\n            span.check  {\n                display: flex;\n                width: 20px;\n                height: 20px;\n                align-items: center;\n                justify-content: center;\n                cursor: pointer;\n                margin-right: 15px;\n            }\n            span.remove {    \n                width:8%;   \n                width: 20px;\n                height: 20px;\n                cursor: pointer;\n            }\n            span.task-name {\n                text-align: left;\n                width:83%;\n            }\n            \n           \n\n        `}static get properties(){return{task:{type:Object},checked:{type:Boolean}}}constructor(){super(),this.checked=!1}render(){return i.c`\n            <li id=\"myLi\" class=\"${this.task.completed?\"completed\":\"\"}\">\n                <span class=\"check\" id= \"checkin\" @click=\"${this.checkedChanged}\" @task-changed=\"${this.taskChangeddd}\" ?checked=\"${this.task.completed}\">\n                    ${this.task.completed?this.checkedIcon:this.unCheckedIcon}\n                </span>           \n                <span class=\"task-name\">\n                    ${this.task.name}\n                </span>\n                <span class=\"remove\" @click=\"${this.removeItem}\">                  \n                    ${this.getIcon()}\n                </span>\n            </li>\n        `}checkedChanged(){let t=this.shadowRoot.getElementById(\"checkin\").attributes.checked;this.checked=!t,this.dispatchEvent(new CustomEvent(\"task-changed\",{bubbles:!0,composed:!0,detail:{state:this.checked,task:this.task}}))}removeItem(){this.dispatchEvent(new CustomEvent(\"element-removed\",{bubbles:!0,composed:!0,detail:this.task.id}))}getIcon(){return i.c`\n            <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 0 24 24\" width=\"24px\" fill=\"#ff0000\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"/></svg>\n        `}get checkedIcon(){return i.c`\n            <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 0 24 24\" width=\"24px\" fill=\"#808000\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm0-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"/></svg>\n        `}get unCheckedIcon(){return i.c`\n            <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 0 24 24\" width=\"24px\" fill=\"#808000\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"/></svg>\n        `}});customElements.define(\"todo-list\",class extends i.a{static get properties(){return{tasks:{type:Array},query:{type:String},order:{type:String}}}constructor(){super(),this.items=[],this.order=\"asc\",this.query=\"\"}static get styles(){return i.b`\n            \n            :host {\n                display: block;\n                margin: 15px 0;\n                padding: 15px;\n                border:1px solid #ddd;\n                box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\n                border-radius: 10px;\n                font-family: sans-serif;\n            }\n\n            section {\n                margin-left: 10px;\n            }\n\n            article {\n                flex-grow: 1;\n            }\n\n            button {\n                margin-right: 15px;\n            }\n\n            div {\n                border-radius: 10px;\n                height: 38px;\n                background: #eee;\n                margin-bottom: 15px;\n                display: flex;\n                align-items: center;\n                padding: 0 15px;\n            }\n            span {\n                margin-right: 10px;\n            }\n             ul {\n                 margin: 0;\n                 padding: 0;\n             }\n        `}render(){return i.c`\n        <div>\n            <article>\n                <button @click=${this.setFilterAsc}>Asc</button>\n                <button @click=${this.setFilterDesc}>Desc</button>\n                <button @click=${this.setFilterCompleted}>Completed</button>\n            </article>\n            <span>Filter</span>\n            <input type=\"test\" @input=\"${this.changeFilter}\">\n            </div>\n            ${this.drawDB()}\n            <ul>\n                ${this.getItems(this.tasks,this.query,this.order).map(t=>i.c`<todo-item .task=${t}></todo-item>`)}\n            </ul>\n        \n        `}drawDB(){this.tasks=JSON.parse(localStorage.getItem(\"todo-list\")),this.tasks=null===this.tasks?[]:this.tasks}getItems(t,e,s){return this.doOrder(this.doFilter(t,e),s)}doFilter(t,e){return t.filter(t=>!e||-1!=t.name.indexOf(e))}setFilterAsc(){this.order=\"asc\"}setFilterDesc(){this.order=\"desc\"}setFilterCompleted(){this.order=\"completed\"}changeFilter(t){this.query=t.target.value}doOrder(t,e){return t.sort((t,s)=>{let i,o,r,d;return r=t.completed,d=s.completed,\"completed\"==e?r>d?1:r<d?-1:0:(\"asc\"==e?(i=t.name.toLowerCase(),o=s.name.toLowerCase()):(o=t.name.toLowerCase(),i=s.name.toLowerCase()),i>o?1:i<o?-1:0)})}});s(1);customElements.define(\"todo-add\",class extends i.a{static get styles(){return i.b`\n            \n            :host {\n                font-family: sans-serif;\n                text-align: left;\n            }\n        `}static get properties(){return{value:{type:String}}}constructor(){super(),this.value=\"\"}render(){return i.c`\n            <dile-input\n                label=\"new task\"\n                value=\"${this.value}\"\n                placeholder=\"write task and click enter\"\n                @enter-pressed=\"${this.createTask}\"\n                @input=\"${t=>this.value=t.target.value}\"\n            ></dile-input>\n        `}createTask(t){this.dispatchEvent(new CustomEvent(\"task-added\",{detail:t.target.value})),this.value=\"\"}});customElements.define(\"fopc-todolist\",class extends i.a{static get styles(){return i.b`\n            :host {\n                display: block;\n                width: 500px;\n                text-align: center;\n                margin: auto;\n                font-family: sans-serif;\n            }\n        `}static get properties(){return{storedTodoList:{type:Array}}}constructor(){super(),this.storedTodoList=JSON.parse(localStorage.getItem(\"todo-list\")),this.storedTodoList=null===this.storedTodoList?[]:this.storedTodoList}render(){return i.c`\n            <h1>To do list</h1>          \n            <todo-add @task-added=\"${this.createTask}\"></todo-add>\n            <todo-list \n                id=\"idlist\" \n                .tasks=\"${this.storedTodoList}\"\n                @task-changed=\"${this.taskChanged}\"\n                @element-removed=\"${this.removeElement}\"\n                >          \n            </todo-list>         \n        `}createTask(t){this.storedTodoList=[...this.storedTodoList,{name:t.detail,completed:!1,id:t.detail+this.storedTodoList.length}],this.saveDB(t)}taskChanged(t){let e=this.storedTodoList.findIndex(e=>e.id===t.detail.task.id);this.storedTodoList[e].completed=t.detail.state,this.setBD(),this.rUpdate()}saveDB(t){this.storedTodoList.length>0&&localStorage.setItem(\"todo-list\",JSON.stringify(this.storedTodoList))}rUpdate(){this.shadowRoot.getElementById(\"idlist\").requestUpdate()}removeElement(t){let e=this.storedTodoList.findIndex(e=>e.id===t.detail);this.storedTodoList.splice(e,1),this.setBD(),this.rUpdate()}setBD(){localStorage.setItem(\"todo-list\",JSON.stringify(this.storedTodoList))}})}},[[2,1,2]]]);","extractedComments":[]}